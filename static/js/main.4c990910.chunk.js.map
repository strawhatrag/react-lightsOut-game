{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","_Component","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","handleClick","bind","_assertThisInitialized","_inherits","_createClass","key","value","evt","flipCellsAroundMe","classes","isLit","React","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","r","nrows","row","c","ncols","push","Math","random","chanceLightStartsOn","coord","console","log","_this$props","_coord$split$map","split","map","Number","_coord$split$map2","_slicedToArray","y","x","flipCell","every","cell","setState","_this2","tblBoard","_loop","concat","flipCellsAround","defaultProps","App","apply","arguments","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4c990910.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe();\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    ncols: 5,\n    nrows: 5,\n    chanceLightStartsOn: 0.25,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard(),\n    };\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n\n    for (let r = 0; r < this.props.nrows; r++) {\n      let row = [];\n\n      for (let c = 0; c < this.props.ncols; c++) {\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n\n      board.push(row);\n    }\n\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    console.log(\"filp\");\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    flipCell(y, x);\n    flipCell(y, x - 1);\n    flipCell(y, x + 1);\n    flipCell(y - 1, x);\n    flipCell(y + 1, x);\n\n    let hasWon = board.every((row) => row.every((cell) => !cell));\n    console.log(hasWon);\n    this.setState({ board: board, hasWon: hasWon });\n  }\n\n  /** Render game board or winning message. */\n\n  render() {\n    if (this.state.hasWon) {\n      return <h1>You won!</h1>;\n    }\n    let tblBoard = [];\n    for (let r = 0; r < this.props.nrows; r++) {\n      let row = [];\n\n      for (let c = 0; c < this.props.ncols; c++) {\n        let coord = `${r}-${c}`;\n        row.push(\n          <Cell\n            key={coord}\n            isLit={this.state.board[r][c]}\n            flipCellsAroundMe={() => this.flipCellsAround(coord)}\n          />\n        );\n      }\n\n      tblBoard.push(<tr>{row}</tr>);\n    }\n\n    return (\n      <div>\n        <div className=\"Board-title\">\n          <div className=\"neon-orange\">Lights</div>\n          <div className=\"neon-blue\">Out</div>\n        </div>\n        <table className=\"Board\">\n          <tbody>{tblBoard}</tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}